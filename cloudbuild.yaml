steps:
  - name: 'ubuntu'
    args: ['bash','-c', 'if [[ $$BRANCH_NAME != ${_BRANCH} ]];then echo "Branch mismatch!!";exit 1; fi']
  - name: 'ubuntu'
    args: ['bash','-c', 'cp config/database.yml.example config/database.yml']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', '${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME', '${_PROJECT}:latest']    
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    args: ['run','test']      
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push','${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME']  
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud components install kubectl
      gcloud container clusters get-credentials ${_CLUSTER} --zone ${_ZONE}
      kubectl delete job rails-db-migrate || true
      cat rails-db-migrate-job.yaml.tmpl | sed 's/IMAGE'"/${_REPO}\/$PROJECT_ID\/${_PROJECT}:$TAG_NAME/g" |
      A=600
      until kubectl get po -a | grep rails-db-migrate | grep Completed;
      do
        sleep 1;
        A=`expr $A - 1`;
        if [ $A -eq 0 ]; then exit 1; fi
      done
      kubectl logs $(kubectl get po -a | grep rails-db-migrate | awk {'print $1'})      
      kubectl set image deployment ${_PROJECT} ${_PROJECT}=${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME  
      kubectl rollout status deployment ${_PROJECT}   
images: ["${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME"]  
substitutions:
  _PROJECT: rails-4-travis
  _REPO: us.gcr.io
  _ZONE: us-east1-b
  _CLUSTER: cluster-1
  _BRANCH: master