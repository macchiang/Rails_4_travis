steps:
  - name: 'ubuntu'
    args: ['bash','-c', 'if [ $BRANCH_NAME != "${_BRANCH}" ];then echo "Branch mismatch!!";exit 1; fi']
  - name: 'ubuntu'
    args: ['bash','-c', 'cp config/database.yml.example config/database.yml']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f','Dockerfile.devel','-t', '${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', '${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME', '${_PROJECT}:latest']    
  - name: 'gcr.io/$PROJECT_ID/docker-compose'
    args: ['run','test']      
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push','${_REPO}/$PROJECT_ID/${_PROJECT}:$TAG_NAME']  
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud components install kubectl
      gcloud container clusters get-credentials ${_CLUSTER} --zone ${_ZONE}
      bash rails-db-migrate.sh
      kubectl set image deployment ${_PROJECT} ${_PROJECT}=${_REPO}/$PROJECT_ID/${_PROJECT}:v1  
      kubectl rollout status deployment ${_PROJECT}
    env:
    - 'IMAGE=${_REPO}\/$PROJECT_ID\/${_PROJECT}:$TAG_NAME'
images: ["${_REPO}/$PROJECT_ID/${_PROJECT}:v1"]  
substitutions:
  _PROJECT: rails-4-travis
  _REPO: us.gcr.io
  _ZONE: us-east1-b
  _CLUSTER: cluster-1
  _BRANCH: master